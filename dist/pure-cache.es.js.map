{"version":3,"file":"pure-cache.es.js","sources":["../src/constants/events.js","../src/utils/checkInstanceDisposal.js","../src/constants/inMemoryDefaultConfig.js","../src/inMemoryExpirer.js","../src/constants/pureCacheDefaultConfig.js","../src/pureCache.js"],"sourcesContent":["/**\n * Events list\n */\nexport default {\n  EXPIRY: \"expiry\",\n  ADD: \"add\",\n  GET: \"get\",\n  REMOVE: \"remove\",\n  CLEAR: \"clear\"\n};\n","const checkIfInstanceIsDisposed = instanceDisposed => {\n  if (instanceDisposed) {\n    throw new Error(\"Cannot use disposed instance.\");\n  }\n};\n\nexport default checkIfInstanceIsDisposed;\n","/**\n * In memory default config\n * */\nconst inMemoryDefaultConfig = {\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default inMemoryDefaultConfig;\n","import checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/inMemoryDefaultConfig\";\n\n/**\n * Near realtime expiry handler\n *\n * queue Structure:\n *  {\n *    time1: [{key: key1, onExpire: () => {}}, {key: key2, onExpire: () => {}}],\n *    time2: [{key: key3, onExpire: () => {}}]\n *  }\n */\nclass InMemoryExpirer {\n  constructor(config = {}) {\n    // Configuration\n    this.config = Object.assign({}, defaultConfig, config);\n\n    // Expirer queue\n    this.queue = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Store last expired time to navigate from current expired time to last expired time\n    // Set initial value to current time - 1\n    // Don't set to 0 as expiry function will loop from current time to 0\n    this.lastExpiredTime = Date.now() - 1;\n\n    // Run the expiry function at every configured interval time\n    const { expiryCheckInterval } = this.config;\n    this.timer = setInterval(this.expire, expiryCheckInterval);\n  }\n\n  /**\n   * Expiry function\n   * */\n  expire = () => {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const time = Date.now();\n\n    for (let t = time; t >= this.lastExpiredTime; t -= 1) {\n      const toExpire = this.queue[t];\n\n      if (toExpire) {\n        delete this.queue[t];\n        toExpire.forEach(({ key, onExpire }) => onExpire(key));\n      }\n    }\n\n    this.lastExpiredTime = time;\n  };\n\n  /**\n   * Add to expiry queue\n   *\n   * @param {Number} time  When to expire\n   * @param {String} key key to store expiry data against\n   * @param {Function} onExpire Expiry callback, called when Date.now() ~= time\n   * */\n  add(time, key, onExpire) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    if (!this.queue[time]) {\n      this.queue[time] = [];\n    }\n\n    this.queue[time].push({ key, onExpire });\n\n    return true;\n  }\n\n  /**\n   * Remove specific key from expiry queue\n   *\n   * @param {Number} time  Expiry time\n   * @param {String} key key to remove from the expiry queue\n   * */\n  remove(time, key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const queue = this.queue[time];\n\n    if (queue) {\n      // Filter out keys in queue[time] which are matching current remove key\n      const filteredQueue = queue.filter(({ key: k }) => k !== key);\n      if (!filteredQueue.length) {\n        delete this.queue[time];\n      } else {\n        this.queue[time] = filteredQueue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Empty queue & clear expirer timer\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    clearInterval(this.timer);\n    this.timer = null;\n    this.queue = {};\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default InMemoryExpirer;\n","/**\n * Pure cache default config\n * */\nconst pureCacheDefaultConfig = {\n  // Default cache expiry time, 60000ms(60s) by default\n  // Set `false` to disable expiry(This beats the purpose of cache, the data is store until the instance is disposed)\n  // Note: Falsy values like `0` will be treated as `false`\n  defaultCacheExpiryIn: 60000,\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default pureCacheDefaultConfig;\n","import mitt from \"mitt\";\nimport Events from \"./constants/events\";\nimport InMemoryExpirer from \"./inMemoryExpirer\";\nimport checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\nimport defaultConfig from \"./constants/pureCacheDefaultConfig\";\n\n/**\n * pure-cache: Cache with confidence ðŸŽ‰ Ultra fast in-memory JavaScript cache with near realtime cache expiry feature âš¡\n *\n * cacheStore Structure:\n *    {\n *      key1: { value: value1, addedAt: 1527012874728, expiryAt: 1527012879729 },\n *      key2: { value: value2, addedAt: 1527012908893, expiryAt: 1527012909880 },\n *      ...\n *    }\n */\nclass PureCache {\n  constructor(config = {}, Expirer = InMemoryExpirer) {\n    // Configuration\n    this.config = Object.assign({}, defaultConfig, config);\n\n    // Event listeners\n    const { on, off, emit } = mitt();\n    [this.on, this.off, this.emit] = [on, off, emit];\n\n    // Cache store\n    this.cacheStore = {};\n\n    // Instance dispose status\n    this.disposed = false;\n\n    // Create cache expirer instance, which maintains its own expiry queue\n    const { expiryCheckInterval } = this.config;\n    this.cacheExpirer = new Expirer({ expiryCheckInterval });\n  }\n\n  /**\n   * Put data into the cache\n   *\n   * @param {String} key  Cache key\n   * @param {String|Object|*} value Value to be stored against cache key\n   * @param {Number} expiryIn Expiry time(in ms from now), defaults to `60000ms(60s)`,\n   *                          if set to falsy values(like `0` & `false`), cache will\n   *                          act as simple in-memory data store and data is never expired for the key\n   *\n   * @returns {Object} Newly added Object({ value, addedAt, expiryAt }) with `value` key consists of actual data\n   * */\n  put(key = \"\", value = \"\", expiryIn = this.config.defaultCacheExpiryIn) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    // Remove existing values in the key(if any)\n    if (this.cacheStore[key]) {\n      this.remove(key);\n    }\n\n    const addedAt = Date.now();\n    // Ignore all falsy values(like `0` & `false`)\n    // Basically if there is no expiry, cache will act as simple in-memory data store\n    const expiryAt = expiryIn ? addedAt + expiryIn : null;\n    const target = { value, addedAt, expiryAt };\n    this.cacheStore[key] = target;\n\n    // If expiry time exists, add to expiry queue\n    if (expiryAt) {\n      // Remove value from cache and trigger expiry event\n      const onExpire = () => {\n        this.emit(Events.EXPIRY, {\n          key,\n          data: target\n        });\n        this.remove(key);\n      };\n\n      this.cacheExpirer.add(expiryAt, key, onExpire);\n    }\n    this.emit(Events.ADD, { key, data: target });\n\n    return target;\n  }\n\n  /**\n   * Get data from the cache\n   *\n   * @param {String} key  Cache key\n   *\n   * @returns {Object|null} If `key` found, returns Object({ value, addedAt, expiryAt })\n   *                        with `value` key consists of actual data, else returns `null`\n   * */\n  get(key = \"\") {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      this.emit(Events.GET, { key, data: target });\n      return target;\n    }\n\n    return null;\n  }\n\n  /**\n   * Remove data from the cache\n   *\n   * @param {String} key  Cache key to be removed from the cache\n   *\n   * @returns {Boolean} If `key` found, returns `true`,else returns `false`\n   * */\n  remove(key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      // Remove key & value from cache\n      delete this.cacheStore[key];\n      const { expiryAt } = target;\n      // If timer exists for the key, remove it\n      this.cacheExpirer.remove(expiryAt, key);\n      this.emit(Events.REMOVE, { key, data: target });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup - Clear entire cache & stop expirer\n   *\n   * @returns {Boolean} Returns `true`\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    Object.keys(this.cacheStore).forEach(key => this.remove(key));\n    this.emit(Events.CLEAR, {});\n    this.cacheExpirer.dispose();\n    this.disposed = true;\n\n    return true;\n  }\n}\n\nexport default PureCache;\n"],"names":["checkIfInstanceIsDisposed","instanceDisposed","Error","inMemoryDefaultConfig","InMemoryExpirer","config","disposed","time","Date","now","t","lastExpiredTime","toExpire","queue","forEach","key","onExpire","Object","assign","defaultConfig","expiryCheckInterval","timer","setInterval","expire","push","filteredQueue","filter","k","length","pureCacheDefaultConfig","PureCache","Expirer","mitt","on","off","emit","cacheStore","cacheExpirer","value","expiryIn","defaultCacheExpiryIn","remove","addedAt","expiryAt","target","Events","EXPIRY","add","ADD","GET","REMOVE","keys","CLEAR","dispose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,aAAe;UACL,QADK;OAER,KAFQ;OAGR,KAHQ;UAIL,QAJK;SAKN;CALT;;ACHA,IAAMA,4BAA4B,SAA5BA,yBAA4B,mBAAoB;MAChDC,gBAAJ,EAAsB;UACd,IAAIC,KAAJ,CAAU,+BAAV,CAAN;;CAFJ;;ACAA;;;AAGA,IAAMC,wBAAwB;;;uBAGP;CAHvB;;ACAA;;;;;;;;;;IASMC;;;6BACqB;;;QAAbC,MAAa,uEAAJ,EAAI;;;;oCAuBhB,YAAM;gCACa,MAAKC,QAA/B;UAEMC,OAAOC,KAAKC,GAAL,EAAb;;WAEK,IAAIC,IAAIH,IAAb,EAAmBG,KAAK,MAAKC,eAA7B,EAA8CD,KAAK,CAAnD,EAAsD;YAC9CE,WAAW,MAAKC,KAAL,CAAWH,CAAX,CAAjB;;YAEIE,QAAJ,EAAc;iBACL,MAAKC,KAAL,CAAWH,CAAX,CAAP;mBACSI,OAAT,CAAiB;gBAAGC,GAAH,QAAGA,GAAH;gBAAQC,QAAR,QAAQA,QAAR;mBAAuBA,SAASD,GAAT,CAAvB;WAAjB;;;;YAICJ,eAAL,GAAuBJ,IAAvB;KArCuB;;;SAElBF,MAAL,GAAcY,OAAOC,MAAP,CAAc,EAAd,EAAkBC,qBAAlB,EAAiCd,MAAjC,CAAd,CAFuB;;SAKlBQ,KAAL,GAAa,EAAb,CALuB;;SAQlBP,QAAL,GAAgB,KAAhB,CARuB;;;;SAalBK,eAAL,GAAuBH,KAAKC,GAAL,KAAa,CAApC,CAbuB;;QAgBfW,mBAhBe,GAgBS,KAAKf,MAhBd,CAgBfe,mBAhBe;SAiBlBC,KAAL,GAAaC,YAAY,KAAKC,MAAjB,EAAyBH,mBAAzB,CAAb;;;;;;;;;;;;;;;;;wBA8BEb,MAAMQ,KAAKC,UAAU;gCACG,KAAKV,QAA/B;;UAEI,CAAC,KAAKO,KAAL,CAAWN,IAAX,CAAL,EAAuB;aAChBM,KAAL,CAAWN,IAAX,IAAmB,EAAnB;;;WAGGM,KAAL,CAAWN,IAAX,EAAiBiB,IAAjB,CAAsB;gBAAA;;OAAtB;aAEO,IAAP;;;;;;;;;;;2BASKjB,MAAMQ,KAAK;gCACU,KAAKT,QAA/B;UAEMO,QAAQ,KAAKA,KAAL,CAAWN,IAAX,CAAd;;UAEIM,KAAJ,EAAW;;YAEHY,gBAAgBZ,MAAMa,MAAN,CAAa;cAAQC,CAAR,SAAGZ,GAAH;iBAAgBY,MAAMZ,GAAtB;SAAb,CAAtB;;YACI,CAACU,cAAcG,MAAnB,EAA2B;iBAClB,KAAKf,KAAL,CAAWN,IAAX,CAAP;SADF,MAEO;eACAM,KAAL,CAAWN,IAAX,IAAmBkB,aAAnB;;;eAGK,IAAP;;;aAGK,KAAP;;;;;;;;8BAMQ;gCACkB,KAAKnB,QAA/B;oBAEc,KAAKe,KAAnB;WACKA,KAAL,GAAa,IAAb;WACKR,KAAL,GAAa,EAAb;WACKP,QAAL,GAAgB,IAAhB;aAEO,IAAP;;;;;;;AC7GJ;;;AAGA,IAAMuB,yBAAyB;;;;wBAIP,KAJO;;;uBAOR;CAPvB;;ACGA;;;;;;;;;;;IAUMC;;;uBACgD;QAAxCzB,MAAwC,uEAA/B,EAA+B;QAA3B0B,OAA2B,uEAAjB3B,eAAiB;;;;;SAE7CC,MAAL,GAAcY,OAAOC,MAAP,CAAc,EAAd,EAAkBC,sBAAlB,EAAiCd,MAAjC,CAAd,CAFkD;;gBAKxB2B,MALwB;QAK1CC,EAL0C,SAK1CA,EAL0C;QAKtCC,GALsC,SAKtCA,GALsC;QAKjCC,IALiC,SAKjCA,IALiC;;eAMjB,CAACF,EAAD,EAAKC,GAAL,EAAUC,IAAV,CANiB;SAM5CF,EAN4C;SAMnCC,GANmC;SAMzBC,IANyB;;SAS7CC,UAAL,GAAkB,EAAlB,CATkD;;SAY7C9B,QAAL,GAAgB,KAAhB,CAZkD;;QAe1Cc,mBAf0C,GAelB,KAAKf,MAfa,CAe1Ce,mBAf0C;SAgB7CiB,YAAL,GAAoB,IAAIN,OAAJ,CAAY;;KAAZ,CAApB;;;;;;;;;;;;;;;;;0BAcqE;;;UAAnEhB,GAAmE,uEAA7D,EAA6D;UAAzDuB,KAAyD,uEAAjD,EAAiD;UAA7CC,QAA6C,uEAAlC,KAAKlC,MAAL,CAAYmC,oBAAsB;gCAC3C,KAAKlC,QAA/B,EADqE;;UAIjE,KAAK8B,UAAL,CAAgBrB,GAAhB,CAAJ,EAA0B;aACnB0B,MAAL,CAAY1B,GAAZ;;;UAGI2B,UAAUlC,KAAKC,GAAL,EAAhB,CARqE;;;UAW/DkC,WAAWJ,WAAWG,UAAUH,QAArB,GAAgC,IAAjD;UACMK,SAAS;oBAAA;wBAAA;;OAAf;WACKR,UAAL,CAAgBrB,GAAhB,IAAuB6B,MAAvB,CAbqE;;UAgBjED,QAAJ,EAAc;;YAEN3B,WAAW,SAAXA,QAAW,GAAM;gBAChBmB,IAAL,CAAUU,OAAOC,MAAjB,EAAyB;oBAAA;kBAEjBF;WAFR;;gBAIKH,MAAL,CAAY1B,GAAZ;SALF;;aAQKsB,YAAL,CAAkBU,GAAlB,CAAsBJ,QAAtB,EAAgC5B,GAAhC,EAAqCC,QAArC;;;WAEGmB,IAAL,CAAUU,OAAOG,GAAjB,EAAsB;gBAAA;cAAaJ;OAAnC;aAEOA,MAAP;;;;;;;;;;;;;0BAWY;UAAV7B,GAAU,uEAAJ,EAAI;gCACc,KAAKT,QAA/B;UAEMsC,SAAS,KAAKR,UAAL,CAAgBrB,GAAhB,CAAf;;UAEI6B,MAAJ,EAAY;aACLT,IAAL,CAAUU,OAAOI,GAAjB,EAAsB;kBAAA;gBAAaL;SAAnC;eACOA,MAAP;;;aAGK,IAAP;;;;;;;;;;;;2BAUK7B,KAAK;gCACgB,KAAKT,QAA/B;UAEMsC,SAAS,KAAKR,UAAL,CAAgBrB,GAAhB,CAAf;;UAEI6B,MAAJ,EAAY;;eAEH,KAAKR,UAAL,CAAgBrB,GAAhB,CAAP;YACQ4B,QAHE,GAGWC,MAHX,CAGFD,QAHE;;aAKLN,YAAL,CAAkBI,MAAlB,CAAyBE,QAAzB,EAAmC5B,GAAnC;aACKoB,IAAL,CAAUU,OAAOK,MAAjB,EAAyB;kBAAA;gBAAaN;SAAtC;eAEO,IAAP;;;aAGK,KAAP;;;;;;;;;;8BAQQ;;;gCACkB,KAAKtC,QAA/B;aAEO6C,IAAP,CAAY,KAAKf,UAAjB,EAA6BtB,OAA7B,CAAqC;eAAO,OAAK2B,MAAL,CAAY1B,GAAZ,CAAP;OAArC;WACKoB,IAAL,CAAUU,OAAOO,KAAjB,EAAwB,EAAxB;WACKf,YAAL,CAAkBgB,OAAlB;WACK/C,QAAL,GAAgB,IAAhB;aAEO,IAAP;;;;;;;;;"}
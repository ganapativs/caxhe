{"version":3,"file":"pure-cache.es.js","sources":["../src/constants/events.js","../src/utils/checkInstanceDisposal.js","../src/expirer.js","../src/pure-cache.js"],"sourcesContent":["/**\n * Events list\n */\nexport default {\n  EXPIRY: \"expiry\",\n  ADD: \"add\",\n  GET: \"get\",\n  REMOVE: \"remove\",\n  CLEAR: \"clear\"\n};\n","const checkIfInstanceIsDisposed = instanceDisposed => {\n  if (instanceDisposed) {\n    throw new Error(\n      \"This instance is already disposed. Please create new instance and try again.\"\n    );\n  }\n};\n\nexport default checkIfInstanceIsDisposed;\n","/**\n * Near realtime expiry handler\n *\n * queue Structure:\n *  {\n *    time1: [{key: key1, onExpire: () => {}}, {key: key2, onExpire: () => {}}],\n *    time2: [{key: key3, onExpire: () => {}}]\n *  }\n */\nimport checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\n\n/**\n * Default config\n * */\nconst defaultConfig = {\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default class Expirer {\n  /**\n   * Expirer queue\n   * */\n  queue = {};\n\n  /**\n   * Instance dispose status\n   * */\n  disposed = false;\n\n  /**\n   * Store last expired time to navigate from current expired time to last expired time\n   * Set initial value to current time - 1\n   * Don't set to 0 as expiry function will loop from current time to 0\n   * */\n  lastExpiredTime = Date.now() - 1;\n\n  constructor(config = {}) {\n    // Configuration\n    this.config = Object.assign({}, defaultConfig, config);\n\n    // Run the expiry function at every configured interval time\n    const { expiryCheckInterval } = this.config;\n    this.timer = setInterval(this.expire, expiryCheckInterval);\n  }\n\n  /**\n   * Expiry function\n   * */\n  expire = () => {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const time = Date.now();\n\n    for (let t = time; t >= this.lastExpiredTime; t -= 1) {\n      const toExpire = this.queue[t];\n\n      if (toExpire) {\n        delete this.queue[t];\n        toExpire.forEach(({ key, onExpire }) => onExpire(key));\n      }\n    }\n\n    this.lastExpiredTime = time;\n  };\n\n  /**\n   * Add to expiry queue\n   *\n   * @param {Number} time  When to expire\n   * @param {String} key Cache key\n   * @param {Function} onExpire Expiry callback, called when Date.now() ~= time\n   * */\n  add(time, key, onExpire) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    if (!this.queue[time]) {\n      this.queue[time] = [];\n    }\n\n    this.queue[time].push({ key, onExpire });\n\n    return true;\n  }\n\n  /**\n   * Remove specific key from expiry queue\n   *\n   * @param {Number} time  Expiry time\n   * @param {String} key Cache key to remove\n   * */\n  remove(time, key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const queue = this.queue[time];\n\n    if (queue) {\n      // Filter out keys in queue[time] which are matching current remove key\n      const filteredQueue = queue.filter(({ key: k }) => k !== key);\n      if (!filteredQueue.length) {\n        delete this.queue[time];\n      } else {\n        this.queue[time] = filteredQueue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup\n   *    - Empty queue\n   *    - Clear expirer timer\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    clearInterval(this.timer);\n    this.timer = null;\n    this.queue = {};\n    this.disposed = true;\n\n    return true;\n  }\n}\n","/**\n * pure-cache: Cache with confidence ðŸŽ‰ Ultra fast in-memory JavaScript cache with near realtime cache expiry feature âš¡\n *\n * cacheStore Structure:\n *    {\n *      key1: { value: value1, addedAt: 1527012874728, expiryAt: 1527012879729 },\n *      key2: { value: value2, addedAt: 1527012908893, expiryAt: 1527012909880 },\n *      ...\n *    }\n */\nimport mitt from \"mitt\";\nimport Events from \"./constants/events\";\nimport Expirer from \"./expirer\";\nimport checkIfInstanceIsDisposed from \"./utils/checkInstanceDisposal\";\n\n/**\n * Default config\n * */\nconst defaultConfig = {\n  // Default cache expiry time, 60000ms(60s) by default\n  // Set `false` to disable expiry(This beats the purpose of cache, the data is store until the instance is disposed)\n  // Note: Falsy values like `0` will be treated as `false`\n  defaultCacheExpiryIn: 60000,\n  // By default, check for cache expiry every 100 ms\n  // Reducing this value might create performance issues\n  expiryCheckInterval: 100\n};\n\nexport default class PureCache {\n  /**\n   * Cache store\n   * */\n  cacheStore = {};\n\n  /**\n   * Instance dispose status\n   * */\n  disposed = false;\n\n  constructor(config = {}) {\n    // Configuration\n    this.config = Object.assign({}, defaultConfig, config);\n\n    // Event listeners\n    const { on, off, emit } = mitt();\n    [this.on, this.off, this.emit] = [on, off, emit];\n\n    // Create cache expirer instance, which maintains its own expiry queue\n    const { expiryCheckInterval } = this.config;\n    this.cacheExpirer = new Expirer({ expiryCheckInterval });\n  }\n\n  /**\n   * Put data into cache\n   *\n   * @param {String} key  Cache key\n   * @param {String|Object|*} value Value to be stored against cache key\n   * @param {Number} expiryIn Expiry time for the key, defaults to defaultCacheExpiryIn\n   * */\n  put(key = \"\", value = \"\", expiryIn = this.config.defaultCacheExpiryIn) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    // Remove existing values in the key(if any)\n    if (this.cacheStore[key]) {\n      this.remove(key);\n    }\n\n    const addedAt = Date.now();\n    // Ignore all falsy values(like `0` & `false`)\n    // Basically if there is no expiry, cache will act as simple in-memory data store\n    const expiryAt = expiryIn ? addedAt + expiryIn : null;\n    const target = { value, addedAt, expiryAt };\n    this.cacheStore[key] = target;\n\n    // If expiry time exists, add to expiry queue\n    if (expiryAt) {\n      // Remove value from cache and trigger expiry event\n      const onExpire = () => {\n        this.emit(Events.EXPIRY, {\n          key,\n          data: target\n        });\n        this.remove(key);\n      };\n\n      this.cacheExpirer.add(expiryAt, key, onExpire);\n    }\n    this.emit(Events.ADD, { key, data: target });\n\n    return target;\n  }\n\n  /**\n   * Get data from cache\n   *\n   * @param {String} key  Cache key\n   *\n   * @returns {Object} Object { value, addedAt, expiryAt }\n   * */\n  get(key = \"\") {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      this.emit(Events.GET, { key, data: target });\n      return target;\n    }\n\n    return null;\n  }\n\n  /**\n   * Remove data from cache\n   *\n   * @param {String} key  Cache key to be removed\n   * */\n  remove(key) {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    const target = this.cacheStore[key];\n\n    if (target) {\n      // Remove key & value from cache\n      delete this.cacheStore[key];\n      const { expiryAt } = target;\n      // If timer exists for the key, remove it\n      this.cacheExpirer.remove(expiryAt, key);\n      this.emit(Events.REMOVE, { key, data: target });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cleanup\n   *    - Clear entire cache\n   *    - Stop expirer\n   * */\n  dispose() {\n    checkIfInstanceIsDisposed(this.disposed);\n\n    Object.keys(this.cacheStore).forEach(key => this.remove(key));\n    this.emit(Events.CLEAR, {});\n    this.cacheExpirer.dispose();\n    this.disposed = true;\n\n    return true;\n  }\n}\n"],"names":["checkIfInstanceIsDisposed","instanceDisposed","Error","defaultConfig","Expirer","config","Date","now","disposed","time","t","lastExpiredTime","toExpire","queue","forEach","key","onExpire","Object","assign","expiryCheckInterval","timer","setInterval","expire","push","filteredQueue","filter","k","length","PureCache","mitt","on","off","emit","cacheExpirer","value","expiryIn","defaultCacheExpiryIn","cacheStore","remove","addedAt","expiryAt","target","Events","EXPIRY","add","ADD","GET","REMOVE","keys","CLEAR","dispose"],"mappings":"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"}